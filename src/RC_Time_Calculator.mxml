<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" applicationDPI="160" 
			   creationComplete="application1_creationCompleteHandler(event)"
			   initialize="view1_initializeHandler(event)" gestureSwipe="application1_gestureSwipeHandler(event)">
	

	<fx:Script>
		<![CDATA[
			import com.flexoop.utilities.dateutils.DateUtils;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLEncoder;
			
			[Bindable]
			public var dateString:String = new String();
			[Bindable]
			public var timeString:String = new String();
			[Bindable]
			public var clockInAC:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var clockOutAC:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var date1:Date;
			[Bindable]
			public var date2:Date;
					

			protected function view1_initializeHandler(event:FlexEvent):void
			{
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
			}

			private function CurrentDateTimeString():String
			{
				var CurrentDateTime:Date = new Date();			
				dateString = CurrentDateTime.getMonth().toString()+ "/"+CurrentDateTime.getDate().toString() +"/"+CurrentDateTime.getFullYear().toString();
				timeString = CurrentDateTime.getHours().toString()+ ":"+ doubleDigitFormat(CurrentDateTime.getMinutes())+ ":"+ doubleDigitFormat(CurrentDateTime.getSeconds());
				var DateTimeString:String = dateString + " " + timeString;
				return DateTimeString;
			}
			
			public function doubleDigitFormat(num:uint):String
			{
				
				if(num < 10) {
					return ("0" + num);
				}
				return num.toString();
				
			}
			public static const MILLISECONDS:String	= "milliseconds";
			private static const SECOND_VALUE:uint	= 1000;
			private static const MINUTE_VALUE:uint	= SECOND_VALUE * 60;
			private static const HOUR_VALUE:uint	= MINUTE_VALUE * 60;
			

			 
			//[Bindable]
			public var totalTime:Number = 0;
			protected function calculateButton_clickHandler(event:MouseEvent):void
			{
				for(var i:int = 0; i<clockOutAC.length ; i++)
				{
					if(i<clockOutAC.length)
					{
						totalTime = clockOutAC[i].zdiff+clockOutAC[i+1].zdiff;	
					}
						
				}
			}
			
			protected function clockInOutButton_clickHandler(event:MouseEvent):void
			{
				if(clockInOutButton.selected)
				{
					clockInOutButton.label = 'Clock OUT';	
					CurrentDateTimeString();
					clockInAC.addItem(timeString);			
					date1 = new Date();
					
					var item1:Object = new Object();
					item1.date = dateString;
					item1.time = timeString;
					item1.zdiff = 0;
					clockOutAC.addItemAt(item1,0);					
				}
				else
				{
					clockInOutButton.label = 'Clock IN';
					CurrentDateTimeString();
					date2 = new Date();
					var num:Number = Math.floor( DateUtils.dateDiff( DateUtils.MILLISECONDS, date1, date2 ) / MINUTE_VALUE );
					
					var item2:Object = new Object();
					item2.date = dateString;
					item2.time = timeString;
					item2.zdiff = 47;
					clockOutAC.addItemAt(item2,0);		
					
					totalTime += item2.zdiff;	
										
					alert.text= 'Total Minutes = '+totalTime.toString();
					hoursCalculation();
					rewriteXML('assets/recordsXML.xml',clockOutAC);
				}
				//clockOutAC.source.reverse();
			}
	
			public function hoursCalculation():void
			{				
				var total1:Number = totalTime/60;
				var total:String = total1.toFixed(2);				
				var results:Array = total.split('.');
				var hrs:String = results[0].toString();
				var minutes:Number = (results[1]*.60);
				Hours.text = 'Total Hours = '+ hrs +':'+ minutes.toFixed(0);
			}
			
			public var xml:XML;
			public var fl:File;
			public function rewriteXML(fileName:String, acToAdd:ArrayCollection):void
			{		
				xml = objectToXML(acToAdd);
				var xmlString:String = xml.toXMLString();
				var fileRef:FileReference = new FileReference() 
				
				
				fl = File.applicationStorageDirectory.resolvePath(fileName);
				var fs:FileStream = new FileStream();  
				
				var xDoc:XML = new XML(xml); 
				xDoc.ignoreWhite = true; 
				var xStr:String = xDoc.toString(); 
				
				fs.open(fl,FileMode.WRITE);  
				fs.writeUTFBytes(xStr); 
						
			}
			
			private function objectToXML(obj:Object):XML {
				var qName:QName = new QName('options');
				var xmlDocument:XMLDocument = new XMLDocument();
				var simpleXMLEncoder:SimpleXMLEncoder = new SimpleXMLEncoder(xmlDocument);
				var xmlNode:XMLNode = simpleXMLEncoder.encodeValue(obj, qName, xmlDocument);
				var xml:XML = new XML(xmlDocument.toString());
				return xml;
			}
			
			public function application1_creationCompleteHandler(event:FlexEvent):void
			{
				var fl:File = File.applicationStorageDirectory.resolvePath('assets/recordsXML.xml');
				dataXML.url = fl.url;
				dataXML.send();
			}
			
			public function windowClosingHandler(event:Event):void 
			{
				var oldFile:File = File.desktopDirectory.resolvePath('recordsXML.xml');
				fl.copyTo(oldFile);
			}
			
			private function dataResultHandler(event:ResultEvent):void
			{	
				var xmlList:ArrayCollection = event.result.options.list.source.item;
				clockOutAC = xmlList;
				clockOutAC.source.reverse();
			}
			
			public function deleteItem():void{       
				clockOutAC.removeItemAt(selDates.selectedIndex);
				clockOutAC.refresh();
				rewriteXML('assets/recordsXML.xml',clockOutAC);			
			}
			
			
			protected function application1_gestureSwipeHandler(event:TransformGestureEvent):void
			{
				switch(event.offsetX)
				{
					case 1:
					{
						deleteItem();
						break;
					}
					case -1:
					{
						// swiped left
						break;
					}
				}
				switch(event.offsetY)
				{
					case 1:
					{
						// swiped down
						break;
					}
					case -1:
					{
						// swiped up
						break;
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="dataXML" result="dataResultHandler(event)" fault="{trace('Fault')}" />
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout/> 
	</s:layout>
	
	<s:ToggleButton id="clockInOutButton" label="Clock IN" click="clockInOutButton_clickHandler(event)" width="100%" height="25%"/>
	<s:HGroup horizontalAlign="center">
		<s:Label id="alert"/>
		<s:Spacer width="50"/>
		<s:Label id="Hours" right="0"/>
	</s:HGroup>
	<s:DataGrid id="selDates" dataProvider="{clockOutAC}"  verticalScrollPolicy="on" width="100%" height="50%">
		<s:columns>
			<s:ArrayCollection>
				<s:GridColumn dataField="date" headerText="Date"/>
				<s:GridColumn dataField="time" headerText="Time"/>
				<s:GridColumn dataField="zdiff" headerText="Diff" />
				<s:GridColumn>
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:Group  right="0" verticalCenter="0" width="40" height="19" >
									<s:HGroup gap="2" horizontalCenter="0" verticalCenter="0" verticalAlign="middle">										
										<s:Image id="deleteicon" buttonMode="true" toolTip="Delete"
												  source="images/icon_delete_column.png"						  
												  click="{outerDocument.deleteItem()}"/>
									</s:HGroup>
								</s:Group>
							</s:GridItemRenderer>							
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayCollection>	
		</s:columns>
	</s:DataGrid>
</s:Application>
