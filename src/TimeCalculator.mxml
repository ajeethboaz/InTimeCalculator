<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" applicationDPI="160" 
			   creationComplete="application1_creationCompleteHandler(event)"
			   initialize="view1_initializeHandler(event)" 
			   gestureSwipe="application1_gestureSwipeHandler(event)">
	
	<fx:Declarations>
		<s:State name="clockInOutView"/>
		<s:State name="searchView"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flexoop.utilities.dateutils.DateUtils;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLEncoder;
			
			[Bindable]
			public var dateString:String = new String();
			[Bindable]
			public var timeString:String = new String();
			[Bindable]
			public var clockInOutAC:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var date1:Date;
			[Bindable]
			public var date2:Date;
			
			
			protected function view1_initializeHandler(event:FlexEvent):void
			{
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				totalDG.columnHeaderGroup.height=0
			}
			
			private function CurrentDateTimeString(date:Date):String
			{
				var CurrentDateTime:Date = date;			
				dateString = CurrentDateTime.getMonth().toString()+ "/"+CurrentDateTime.getDate().toString() +"/"+CurrentDateTime.getFullYear().toString();
				timeString = CurrentDateTime.getHours().toString()+ ":"+ doubleDigitFormat(CurrentDateTime.getMinutes())+ ":"+ doubleDigitFormat(CurrentDateTime.getSeconds());
				var DateTimeString:String = dateString + " " + timeString;
				return DateTimeString;
			}
			
			public function doubleDigitFormat(num:uint):String
			{			
				if(num < 10) {
					return ("0" + num);
				}
				return num.toString();	
			}
			public static const MILLISECONDS:String	= "milliseconds";
			private static const SECOND_VALUE:uint	= 1000;
			private static const MINUTE_VALUE:uint	= SECOND_VALUE * 60;
			private static const HOUR_VALUE:uint	= MINUTE_VALUE * 60;
			
			
			
			//[Bindable]
			public var totalTime:Number = 0;
			protected function calculateButton_clickHandler(event:MouseEvent):void
			{
				for(var i:int = 0; i<clockInOutAC.length ; i++)
				{
					if(i<clockInOutAC.length)
					{
						totalTime = clockInOutAC[i].zdiff+clockInOutAC[i+1].zdiff;	
					}
					
				}
			}
			
			protected function clockInOutButton_clickHandler(event:MouseEvent):void
			{				
				if(clockInOutButton.selected)
				{
					clockInOutButton.label = 'Clock OUT';	
					date1 = new Date();
					CurrentDateTimeString(date1);
					//clockInAC.addItem(timeString);			
					
					var item1:Object = new Object();
					item1.date = dateString;
					item1.time = timeString;
					item1.zdiff = 0;
					clockInOutAC.addItemAt(item1,0);					
				}
				else
				{
					clockInOutButton.label = 'Clock IN';
					date2 = new Date();
					CurrentDateTimeString(date2);
					var num:Number = Math.floor( DateUtils.dateDiff( DateUtils.MILLISECONDS, date1, date2 ) / MINUTE_VALUE );
					
					var item2:Object = new Object();
					item2.date = dateString;
					item2.time = timeString;
					item2.zdiff = 47;
					clockInOutAC.addItemAt(item2,0);		
					
					rewriteXML('assets/recordsXML.xml',clockInOutAC);
				}
			}
			
			public var xml:XML;
			public var fl:File;
			public function rewriteXML(fileName:String, acToAdd:ArrayCollection):void
			{		
				xml = objectToXML(acToAdd);
				var xmlString:String = xml.toXMLString();
				var fileRef:FileReference = new FileReference() 
				
				
				fl = File.applicationStorageDirectory.resolvePath(fileName);
				var fs:FileStream = new FileStream();  
				
				var xDoc:XML = new XML(xml); 
				xDoc.ignoreWhite = true; 
				var xStr:String = xDoc.toString(); 
				
				fs.open(fl,FileMode.WRITE);  
				fs.writeUTFBytes(xStr); 
				
			}
			
			private function objectToXML(obj:Object):XML {
				var qName:QName = new QName('options');
				var xmlDocument:XMLDocument = new XMLDocument();
				var simpleXMLEncoder:SimpleXMLEncoder = new SimpleXMLEncoder(xmlDocument);
				var xmlNode:XMLNode = simpleXMLEncoder.encodeValue(obj, qName, xmlDocument);
				var xml:XML = new XML(xmlDocument.toString());
				return xml;
			}
			
			public function application1_creationCompleteHandler(event:FlexEvent):void
			{
				var fl:File = File.applicationStorageDirectory.resolvePath('assets/recordsXML.xml');
				dataXML.url = fl.url;
				dataXML.send();
			}
			
			public function windowClosingHandler(event:Event):void 
			{
				var oldFile:File = File.desktopDirectory.resolvePath('recordsXML.xml');
				fl.copyTo(oldFile);
			}
			
			private function dataResultHandler(event:ResultEvent):void
			{	
				/*if(event.result.options != null)
				{*/
				var xmlList:ArrayCollection = event.result.options.list.source.item;
				clockInOutAC = xmlList;
				clockInOutAC.source.reverse();	
				//}				
			}
			
			public function deleteItem():void{       
				selDates.dataProvider.removeItemAt(selDates.selectedIndex);
				clockInOutAC = selDates.dataProvider as ArrayCollection;
				clockInOutAC.refresh();
				rewriteXML('assets/recordsXML.xml',clockInOutAC);			
			}
			
			
			protected function application1_gestureSwipeHandler(event:TransformGestureEvent):void
			{
				switch(event.offsetX)
				{
					case 1:
					{
						deleteItem();
						break;
					}
					case -1:
					{
						// swiped left
						break;
					}
				}
				switch(event.offsetY)
				{
					case 1:
					{
						// swiped down
						break;
					}
					case -1:
					{
						// swiped up
						break;
					}
				}
			}
			
			protected function searchByDate_changeHandler(event:Event):void
			{
				clockInOutAC.filterFunction = filterAC;
				clockInOutAC.refresh();
			}
			
			private function filterAC(item:Object):Boolean
			{
				CurrentDateTimeString(searchByDate.selectedDate);
				searchText.text = dateString;
				
				var isselected:Boolean = false;
				if(item.date == dateString)
				{
					isselected = true;
				}
				return isselected;
			}
			
			protected function button1_clickHandler():void
			{
				if(currentState == 'searchView')
				{
					currentState = 'clockInOutView';
					clockInOutAC.filterFunction = null;
					clockInOutAC.refresh();
				}else
				{
					currentState = 'searchView';	
				}
				
			}
			
			public function TotalMinFunction(item:Object, col:GridColumn):String
			{
				var n:int = clockInOutAC.length;
				var total:Number = 0;
				for each (var row:Object in selDates.dataProvider) {
					total += Number(row.zdiff);
				}
				return "Total Minutes = " + total.toFixed(2);
			}
			
			public function TotalHoursFunction(item:Object, col:GridColumn):String
			{		
				var n:int = clockInOutAC.length;
				var totalMin:Number = 0;
				for each (var row:Object in selDates.dataProvider) {
					totalMin += Number(row.zdiff);
				}
					
				var total1:Number = totalMin/60;
				var total:String = total1.toFixed(2);				
				var results:Array = total.split('.');
				var hrs:String = results[0].toString();
				var minutes:Number = (results[1]*.60);
				
				return 'Total Hours = '+ hrs +':'+ minutes.toFixed(0);	
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="dataXML" result="dataResultHandler(event)" fault="{trace('Fault')}" />
	</fx:Declarations>
	<s:controlBarContent>
		<s:TextInput id="key" width="100%" height="40" depth="1" enter="button1_clickHandler()" prompt="MM/DD/YYYY"/>
		<s:Button click="button1_clickHandler()" height="40" width="70" icon="@Embed('assets/search.png')"/>
	</s:controlBarContent>
	<s:layout>
		<s:VerticalLayout/> 
	</s:layout>
	<s:ToggleButton id="clockInOutButton" label="Clock IN" click="clockInOutButton_clickHandler(event)" width="100%" height="25%" includeIn="clockInOutView"/>
	
	
	<s:HGroup includeIn="searchView">
		<s:DateSpinner id="searchByDate" change="searchByDate_changeHandler(event)"/>
		<s:TextInput id="searchText" editable="false"/>
	</s:HGroup>
	
	<s:DataGrid id="selDates" dataProvider="{clockInOutAC}"  verticalScrollPolicy="on" width="100%" height="50%">
		<s:columns>
			<s:ArrayCollection>
				<s:GridColumn dataField="date" headerText="Date"/>
				<s:GridColumn dataField="time" headerText="Time"/>
				<s:GridColumn dataField="zdiff" headerText="Diff" />
				<s:GridColumn>
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:Group  right="0" verticalCenter="0" width="40" height="19" >
									<s:HGroup gap="2" horizontalCenter="0" verticalCenter="0" verticalAlign="middle">										
										<s:Image id="deleteicon" buttonMode="true" toolTip="Delete"
												 source="images/icon_delete_column.png"						  
												 click="{outerDocument.deleteItem()}"/>
									</s:HGroup>
								</s:Group>
							</s:GridItemRenderer>							
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayCollection>	
		</s:columns>
	</s:DataGrid>
	<s:DataGrid id="totalDG" dataProvider="{clockInOutAC}" width="100%" height="26"  >			
		<s:columns>
			<s:ArrayCollection>
				<s:GridColumn labelFunction="TotalMinFunction" dataField="zdiff"/>
				<s:GridColumn labelFunction="TotalHoursFunction" dataField="zdiff"/>
			</s:ArrayCollection>
		</s:columns>
	</s:DataGrid>
</s:Application>